{
  "api/Stateless.FiringMode.html": {
    "href": "api/Stateless.FiringMode.html",
    "title": "Enum FiringMode | Stateless For Unity documentation",
    "keywords": "Enum FiringMode Enum for the different modes used when Fire-ing a trigger Namespace : Stateless Assembly : cs.temp.dll.dll Syntax public enum FiringMode Fields Name Description Immediate Use immediate mode when the queuing of trigger events are not needed. Care must be taken when using this mode, as there is no run-to-completion guaranteed. Queued Use the queued Fire-ing mode when run-to-completion is required. This is the recommended mode."
  },
  "api/Stateless.Graph.Decision.html": {
    "href": "api/Stateless.Graph.Decision.html",
    "title": "Class Decision | Stateless For Unity documentation",
    "keywords": "Class Decision Used to keep track of the decision point of a dynamic transition Inheritance Object State Decision Inherited Members State.SuperState State.Leaving State.Arriving State.NodeName State.StateName State.EntryActions State.ExitActions Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Graph Assembly : cs.temp.dll.dll Syntax public class Decision : State Constructors Decision(InvocationInfo, Int32) Creates a new instance of Decision . Declaration public Decision(InvocationInfo method, int num) Parameters Type Name Description InvocationInfo method The name of the invoked method. Int32 num The decision count. Properties Method Gets the underlying method description of the invoked method. Declaration public InvocationInfo Method { get; } Property Value Type Description InvocationInfo"
  },
  "api/Stateless.Graph.DynamicTransition.html": {
    "href": "api/Stateless.Graph.DynamicTransition.html",
    "title": "Class DynamicTransition | Stateless For Unity documentation",
    "keywords": "Class DynamicTransition Represents a dynamic transition. Inheritance Object Transition DynamicTransition Inherited Members Transition.Trigger Transition.DestinationEntryActions Transition.ExecuteEntryExitActions Transition.SourceState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Graph Assembly : cs.temp.dll.dll Syntax public class DynamicTransition : Transition Constructors DynamicTransition(State, State, TriggerInfo, String) Creates a new instance of DynamicTransition . Declaration public DynamicTransition(State sourceState, State destinationState, TriggerInfo trigger, string criterion) Parameters Type Name Description State sourceState The source state. State destinationState The destination state. TriggerInfo trigger The trigger associated with this transition. String criterion The reason the destination state was chosen. Properties Criterion When is this transition followed Declaration public string Criterion { get; } Property Value Type Description String DestinationState The state where this transition finishes Declaration public State DestinationState { get; } Property Value Type Description State"
  },
  "api/Stateless.Graph.FixedTransition.html": {
    "href": "api/Stateless.Graph.FixedTransition.html",
    "title": "Class FixedTransition | Stateless For Unity documentation",
    "keywords": "Class FixedTransition Represents a fixed transition. Inheritance Object Transition FixedTransition Inherited Members Transition.Trigger Transition.DestinationEntryActions Transition.ExecuteEntryExitActions Transition.SourceState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Graph Assembly : cs.temp.dll.dll Syntax public class FixedTransition : Transition Constructors FixedTransition(State, State, TriggerInfo, IEnumerable<InvocationInfo>) Creates a new instance of FixedTransition . Declaration public FixedTransition(State sourceState, State destinationState, TriggerInfo trigger, IEnumerable<InvocationInfo> guards) Parameters Type Name Description State sourceState The source state. State destinationState The destination state. TriggerInfo trigger The trigger associated with this transition. IEnumerable < InvocationInfo > guards The guard conditions associated with this transition. Properties DestinationState The state where this transition finishes Declaration public State DestinationState { get; } Property Value Type Description State Guards Guard functions for this transition (null if none) Declaration public IEnumerable<InvocationInfo> Guards { get; } Property Value Type Description IEnumerable < InvocationInfo >"
  },
  "api/Stateless.Graph.GraphStyleBase.html": {
    "href": "api/Stateless.Graph.GraphStyleBase.html",
    "title": "Class GraphStyleBase | Stateless For Unity documentation",
    "keywords": "Class GraphStyleBase Style definition for StateGraph. Provides formatting of individual items in a state graph. Inheritance Object GraphStyleBase UmlDotGraphStyle Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Graph Assembly : cs.temp.dll.dll Syntax public abstract class GraphStyleBase Methods FormatAllTransitions(List<Transition>) Returns the formatted text for all the transitions found in the state graph. This form, which can be overridden, determines the type of each transition and passes the appropriate parameters to the virtual FormatOneTransition() function. Declaration public virtual List<string> FormatAllTransitions(List<Transition> transitions) Parameters Type Name Description List < Transition > transitions List of all transitions in the state graph Returns Type Description List < String > Description of all transitions, in the desired format FormatOneCluster(SuperState) Returns the formatted text for a single superstate and its substates. For example, for DOT files this would be a subgraph containing nodes for all the substates. Declaration public abstract string FormatOneCluster(SuperState stateInfo) Parameters Type Name Description SuperState stateInfo The superstate to generate text for Returns Type Description String Description of the superstate, and all its substates, in the desired format FormatOneDecisionNode(String, String) Returns the formatted text for a single decision node. A decision node is created each time there is a PermitDynamic() transition. There will be a transition from the state that has the dynamic transition to the decision node, and transitions from the decision node to each of the destination nodes. If the caller did not specify the possible destination states, there will be no transitions leaving the decision node. Declaration public abstract string FormatOneDecisionNode(string nodeName, string label) Parameters Type Name Description String nodeName Name of the node String label Label for the node Returns Type Description String FormatOneState(State) Returns the formatted text for a single state. For example, for DOT files this would be the description of a single node: nodename [label=\"statename\"]; Usually the information on exit and entry actions would also be included here. Declaration public abstract string FormatOneState(State state) Parameters Type Name Description State state The state to generate text for Returns Type Description String Description of the state in the desired format FormatOneTransition(String, String, IEnumerable<String>, String, IEnumerable<String>) Returns the formatted text for a single transition. Only required if the default version of FormatAllTransitions() is used. Declaration public virtual string FormatOneTransition(string sourceNodeName, string trigger, IEnumerable<string> actions, string destinationNodeName, IEnumerable<string> guards) Parameters Type Name Description String sourceNodeName Node name of the source state node String trigger Name of the trigger IEnumerable < String > actions List of entry and exit actions (if any) String destinationNodeName IEnumerable < String > guards List of guards (if any) Returns Type Description String GetPrefix() Get the text that must be present at the top of a state graph file. For example, for DOT files the prefix text would be digraph { Declaration public abstract string GetPrefix() Returns Type Description String Prefix text"
  },
  "api/Stateless.Graph.html": {
    "href": "api/Stateless.Graph.html",
    "title": "Namespace Stateless.Graph | Stateless For Unity documentation",
    "keywords": "Namespace Stateless.Graph Classes Decision Used to keep track of the decision point of a dynamic transition DynamicTransition Represents a dynamic transition. FixedTransition Represents a fixed transition. GraphStyleBase Style definition for StateGraph. Provides formatting of individual items in a state graph. State Used to keep track of a state that has substates StateGraph This class is used to generate a symbolic representation of the graph structure, in preparation for feeding it to a diagram generator StayTransition Represents a transition from a state to itself. SuperState Used to keep track of a state that has substates Transition Used to keep track of transitions between states UmlDotGraph Class to generate a DOT grah in UML format UmlDotGraphStyle Generate DOT graphs in basic UML style"
  },
  "api/Stateless.Graph.State.html": {
    "href": "api/Stateless.Graph.State.html",
    "title": "Class State | Stateless For Unity documentation",
    "keywords": "Class State Used to keep track of a state that has substates Inheritance Object State Decision SuperState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Graph Assembly : cs.temp.dll.dll Syntax public class State Constructors State(StateInfo) Constructs a new instance of State. Declaration public State(StateInfo stateInfo) Parameters Type Name Description StateInfo stateInfo The state to be represented. State(String) Constructs a new instance of State. Declaration public State(string nodeName) Parameters Type Name Description String nodeName The node name. Properties Arriving List of all transitions that enter this state (never null) Declaration public List<Transition> Arriving { get; } Property Value Type Description List < Transition > EntryActions Actions that are executed when you enter this state from any trigger Declaration public List<string> EntryActions { get; } Property Value Type Description List < String > ExitActions Actions that are executed when you exit this state Declaration public List<string> ExitActions { get; } Property Value Type Description List < String > Leaving List of all transitions that leave this state (never null) Declaration public List<Transition> Leaving { get; } Property Value Type Description List < Transition > NodeName Unique name of this object Declaration public string NodeName { get; } Property Value Type Description String StateName Name of the state represented by this object Declaration public string StateName { get; } Property Value Type Description String SuperState The superstate of this state (null if none) Declaration public SuperState SuperState { get; set; } Property Value Type Description SuperState"
  },
  "api/Stateless.Graph.StateGraph.html": {
    "href": "api/Stateless.Graph.StateGraph.html",
    "title": "Class StateGraph | Stateless For Unity documentation",
    "keywords": "Class StateGraph This class is used to generate a symbolic representation of the graph structure, in preparation for feeding it to a diagram generator Inheritance Object StateGraph Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Graph Assembly : cs.temp.dll.dll Syntax public class StateGraph Constructors StateGraph(StateMachineInfo) Creates a new instance of StateGraph . Declaration public StateGraph(StateMachineInfo machineInfo) Parameters Type Name Description StateMachineInfo machineInfo An object which exposes the states, transitions, and actions of this machine. Properties Decisions List of all decision nodes in the graph. A decision node is generated each time there is a PermitDynamic() transition. Declaration public List<Decision> Decisions { get; } Property Value Type Description List < Decision > States List of all states in the graph, indexed by the string representation of the underlying State object. Declaration public Dictionary<string, State> States { get; } Property Value Type Description Dictionary < String , State > Transitions List of all transitions in the graph Declaration public List<Transition> Transitions { get; } Property Value Type Description List < Transition > Methods ToGraph(GraphStyleBase) Convert the graph into a string representation, using the specified style. Declaration public string ToGraph(GraphStyleBase style) Parameters Type Name Description GraphStyleBase style Returns Type Description String"
  },
  "api/Stateless.Graph.StayTransition.html": {
    "href": "api/Stateless.Graph.StayTransition.html",
    "title": "Class StayTransition | Stateless For Unity documentation",
    "keywords": "Class StayTransition Represents a transition from a state to itself. Inheritance Object Transition StayTransition Inherited Members Transition.Trigger Transition.DestinationEntryActions Transition.ExecuteEntryExitActions Transition.SourceState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Graph Assembly : cs.temp.dll.dll Syntax public class StayTransition : Transition Constructors StayTransition(State, TriggerInfo, IEnumerable<InvocationInfo>, Boolean) Creates a new instance of StayTransition . Declaration public StayTransition(State sourceState, TriggerInfo trigger, IEnumerable<InvocationInfo> guards, bool executeEntryExitActions) Parameters Type Name Description State sourceState The source state. TriggerInfo trigger The trigger associated with this transition. IEnumerable < InvocationInfo > guards The guard conditions associated with this transition. Boolean executeEntryExitActions Sets whether the entry and exit actions are executed when the transition is enacted. Properties Guards The guard conditions associated with this transition. Declaration public IEnumerable<InvocationInfo> Guards { get; } Property Value Type Description IEnumerable < InvocationInfo >"
  },
  "api/Stateless.Graph.SuperState.html": {
    "href": "api/Stateless.Graph.SuperState.html",
    "title": "Class SuperState | Stateless For Unity documentation",
    "keywords": "Class SuperState Used to keep track of a state that has substates Inheritance Object State SuperState Inherited Members State.SuperState State.Leaving State.Arriving State.NodeName State.StateName State.EntryActions State.ExitActions Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Graph Assembly : cs.temp.dll.dll Syntax public class SuperState : State Constructors SuperState(StateInfo) Constructs a new instance of SuperState. Declaration public SuperState(StateInfo stateInfo) Parameters Type Name Description StateInfo stateInfo The super state to be represented. Properties SubStates List of states that are a substate of this state Declaration public List<State> SubStates { get; } Property Value Type Description List < State >"
  },
  "api/Stateless.Graph.Transition.html": {
    "href": "api/Stateless.Graph.Transition.html",
    "title": "Class Transition | Stateless For Unity documentation",
    "keywords": "Class Transition Used to keep track of transitions between states Inheritance Object Transition DynamicTransition FixedTransition StayTransition Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Graph Assembly : cs.temp.dll.dll Syntax public class Transition Constructors Transition(State, TriggerInfo) Base class of transitions Declaration public Transition(State sourceState, TriggerInfo trigger) Parameters Type Name Description State sourceState TriggerInfo trigger Fields DestinationEntryActions List of actions to be performed by the destination state (the one being entered) Declaration public List<ActionInfo> DestinationEntryActions Field Value Type Description List < ActionInfo > Properties ExecuteEntryExitActions Should the entry and exit actions be executed when this transition takes place Declaration public bool ExecuteEntryExitActions { get; protected set; } Property Value Type Description Boolean SourceState The state where this transition starts Declaration public State SourceState { get; } Property Value Type Description State Trigger The trigger that causes this transition Declaration public TriggerInfo Trigger { get; } Property Value Type Description TriggerInfo"
  },
  "api/Stateless.Graph.UmlDotGraph.html": {
    "href": "api/Stateless.Graph.UmlDotGraph.html",
    "title": "Class UmlDotGraph | Stateless For Unity documentation",
    "keywords": "Class UmlDotGraph Class to generate a DOT grah in UML format Inheritance Object UmlDotGraph Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Graph Assembly : cs.temp.dll.dll Syntax public static class UmlDotGraph Methods Format(StateMachineInfo) Generate a UML DOT graph from the state machine info Declaration public static string Format(StateMachineInfo machineInfo) Parameters Type Name Description StateMachineInfo machineInfo Returns Type Description String"
  },
  "api/Stateless.Graph.UmlDotGraphStyle.html": {
    "href": "api/Stateless.Graph.UmlDotGraphStyle.html",
    "title": "Class UmlDotGraphStyle | Stateless For Unity documentation",
    "keywords": "Class UmlDotGraphStyle Generate DOT graphs in basic UML style Inheritance Object GraphStyleBase UmlDotGraphStyle Inherited Members GraphStyleBase.FormatAllTransitions(List<Transition>) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Graph Assembly : cs.temp.dll.dll Syntax public class UmlDotGraphStyle : GraphStyleBase Methods FormatOneCluster(SuperState) Returns the formatted text for a single superstate and its substates. For example, for DOT files this would be a subgraph containing nodes for all the substates. Declaration public override string FormatOneCluster(SuperState stateInfo) Parameters Type Name Description SuperState stateInfo The superstate to generate text for Returns Type Description String Description of the superstate, and all its substates, in the desired format Overrides GraphStyleBase.FormatOneCluster(SuperState) FormatOneDecisionNode(String, String) Generate the text for a single decision node Declaration public override string FormatOneDecisionNode(string nodeName, string label) Parameters Type Name Description String nodeName Name of the node String label Label for the node Returns Type Description String Overrides GraphStyleBase.FormatOneDecisionNode(String, String) FormatOneState(State) Generate the text for a single state Declaration public override string FormatOneState(State state) Parameters Type Name Description State state The state to generate text for Returns Type Description String Overrides GraphStyleBase.FormatOneState(State) FormatOneTransition(String, String, IEnumerable<String>, String, IEnumerable<String>) Generate text for a single transition Declaration public override string FormatOneTransition(string sourceNodeName, string trigger, IEnumerable<string> actions, string destinationNodeName, IEnumerable<string> guards) Parameters Type Name Description String sourceNodeName String trigger IEnumerable < String > actions String destinationNodeName IEnumerable < String > guards Returns Type Description String Overrides GraphStyleBase.FormatOneTransition(String, String, IEnumerable<String>, String, IEnumerable<String>) GetPrefix() Get the text that starts a new graph Declaration public override string GetPrefix() Returns Type Description String Overrides GraphStyleBase.GetPrefix()"
  },
  "api/Stateless.html": {
    "href": "api/Stateless.html",
    "title": "Namespace Stateless | Stateless For Unity documentation",
    "keywords": "Namespace Stateless Classes StateMachine<TState, TTrigger> Models behaviour as transitions between a finite set of states. StateMachine<TState, TTrigger>.InitialTransition Describes an initial state transition. StateMachine<TState, TTrigger>.StateConfiguration The configuration for a single state value. StateMachine<TState, TTrigger>.Transition Describes a state transition. StateMachine<TState, TTrigger>.TriggerWithParameters Associates configured parameters with an underlying trigger value. StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> A configured trigger with one required argument. StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> A configured trigger with two required arguments. StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> A configured trigger with three required arguments. StateMachineResources Enums FiringMode Enum for the different modes used when Fire-ing a trigger"
  },
  "api/Stateless.Reflection.ActionInfo.html": {
    "href": "api/Stateless.Reflection.ActionInfo.html",
    "title": "Class ActionInfo | Stateless For Unity documentation",
    "keywords": "Class ActionInfo Information on entry and exit actions Inheritance Object ActionInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Reflection Assembly : cs.temp.dll.dll Syntax public class ActionInfo Constructors ActionInfo(InvocationInfo, String) Constructor Declaration public ActionInfo(InvocationInfo method, string fromTrigger) Parameters Type Name Description InvocationInfo method String fromTrigger Properties FromTrigger If non-null, specifies the \"from\" trigger that must be present for this method to be invoked Declaration public string FromTrigger { get; } Property Value Type Description String Method The method invoked during the action (entry or exit) Declaration public InvocationInfo Method { get; } Property Value Type Description InvocationInfo"
  },
  "api/Stateless.Reflection.DynamicStateInfo.html": {
    "href": "api/Stateless.Reflection.DynamicStateInfo.html",
    "title": "Class DynamicStateInfo | Stateless For Unity documentation",
    "keywords": "Class DynamicStateInfo Inheritance Object DynamicStateInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Reflection Assembly : cs.temp.dll.dll Syntax public class DynamicStateInfo Constructors DynamicStateInfo(String, String) Constructor Declaration public DynamicStateInfo(string destinationState, string criterion) Parameters Type Name Description String destinationState String criterion Properties Criterion The reason this destination state was chosen Declaration public string Criterion { get; set; } Property Value Type Description String DestinationState The name of the destination state Declaration public string DestinationState { get; set; } Property Value Type Description String"
  },
  "api/Stateless.Reflection.DynamicStateInfos.html": {
    "href": "api/Stateless.Reflection.DynamicStateInfos.html",
    "title": "Class DynamicStateInfos | Stateless For Unity documentation",
    "keywords": "Class DynamicStateInfos List of DynamicStateInfo objects, with \"add\" function for ease of definition Inheritance Object List < DynamicStateInfo > DynamicStateInfos Implements IList < DynamicStateInfo > ICollection < DynamicStateInfo > IList ICollection IReadOnlyList < DynamicStateInfo > IReadOnlyCollection < DynamicStateInfo > IEnumerable < DynamicStateInfo > IEnumerable Inherited Members System.Collections.Generic.List<Stateless.Reflection.DynamicStateInfo>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<Stateless.Reflection.DynamicStateInfo>.System.Collections.IList.set_Item(System.Int32, System.Object) List<DynamicStateInfo>.Add(DynamicStateInfo) List<DynamicStateInfo>.IList.Add(Object) List<DynamicStateInfo>.AddRange(IEnumerable<DynamicStateInfo>) List<DynamicStateInfo>.AsReadOnly() List<DynamicStateInfo>.BinarySearch(Int32, Int32, DynamicStateInfo, IComparer<DynamicStateInfo>) List<DynamicStateInfo>.BinarySearch(DynamicStateInfo) List<DynamicStateInfo>.BinarySearch(DynamicStateInfo, IComparer<DynamicStateInfo>) List<DynamicStateInfo>.Clear() List<DynamicStateInfo>.Contains(DynamicStateInfo) List<DynamicStateInfo>.IList.Contains(Object) List<DynamicStateInfo>.ConvertAll<TOutput>(Converter<DynamicStateInfo, TOutput>) List<DynamicStateInfo>.CopyTo(DynamicStateInfo[]) List<DynamicStateInfo>.ICollection.CopyTo(Array, Int32) List<DynamicStateInfo>.CopyTo(Int32, DynamicStateInfo[], Int32, Int32) List<DynamicStateInfo>.CopyTo(DynamicStateInfo[], Int32) List<DynamicStateInfo>.Exists(Predicate<DynamicStateInfo>) List<DynamicStateInfo>.Find(Predicate<DynamicStateInfo>) List<DynamicStateInfo>.FindAll(Predicate<DynamicStateInfo>) List<DynamicStateInfo>.FindIndex(Predicate<DynamicStateInfo>) List<DynamicStateInfo>.FindIndex(Int32, Predicate<DynamicStateInfo>) List<DynamicStateInfo>.FindIndex(Int32, Int32, Predicate<DynamicStateInfo>) List<DynamicStateInfo>.FindLast(Predicate<DynamicStateInfo>) List<DynamicStateInfo>.FindLastIndex(Predicate<DynamicStateInfo>) List<DynamicStateInfo>.FindLastIndex(Int32, Predicate<DynamicStateInfo>) List<DynamicStateInfo>.FindLastIndex(Int32, Int32, Predicate<DynamicStateInfo>) List<DynamicStateInfo>.ForEach(Action<DynamicStateInfo>) List<DynamicStateInfo>.GetEnumerator() List<DynamicStateInfo>.IEnumerable<DynamicStateInfo>.GetEnumerator() List<DynamicStateInfo>.IEnumerable.GetEnumerator() List<DynamicStateInfo>.GetRange(Int32, Int32) List<DynamicStateInfo>.IndexOf(DynamicStateInfo) List<DynamicStateInfo>.IList.IndexOf(Object) List<DynamicStateInfo>.IndexOf(DynamicStateInfo, Int32) List<DynamicStateInfo>.IndexOf(DynamicStateInfo, Int32, Int32) List<DynamicStateInfo>.Insert(Int32, DynamicStateInfo) List<DynamicStateInfo>.IList.Insert(Int32, Object) List<DynamicStateInfo>.InsertRange(Int32, IEnumerable<DynamicStateInfo>) List<DynamicStateInfo>.LastIndexOf(DynamicStateInfo) List<DynamicStateInfo>.LastIndexOf(DynamicStateInfo, Int32) List<DynamicStateInfo>.LastIndexOf(DynamicStateInfo, Int32, Int32) List<DynamicStateInfo>.Remove(DynamicStateInfo) List<DynamicStateInfo>.IList.Remove(Object) List<DynamicStateInfo>.RemoveAll(Predicate<DynamicStateInfo>) List<DynamicStateInfo>.RemoveAt(Int32) List<DynamicStateInfo>.RemoveRange(Int32, Int32) List<DynamicStateInfo>.Reverse() List<DynamicStateInfo>.Reverse(Int32, Int32) List<DynamicStateInfo>.Sort() List<DynamicStateInfo>.Sort(IComparer<DynamicStateInfo>) List<DynamicStateInfo>.Sort(Int32, Int32, IComparer<DynamicStateInfo>) List<DynamicStateInfo>.Sort(Comparison<DynamicStateInfo>) List<DynamicStateInfo>.ToArray() List<DynamicStateInfo>.TrimExcess() List<DynamicStateInfo>.TrueForAll(Predicate<DynamicStateInfo>) List<DynamicStateInfo>.Capacity List<DynamicStateInfo>.Count List<DynamicStateInfo>.IList.IsFixedSize List<DynamicStateInfo>.ICollection<DynamicStateInfo>.IsReadOnly List<DynamicStateInfo>.IList.IsReadOnly List<DynamicStateInfo>.ICollection.IsSynchronized List<DynamicStateInfo>.ICollection.SyncRoot List<DynamicStateInfo>.Item[Int32] List<DynamicStateInfo>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Reflection Assembly : cs.temp.dll.dll Syntax public class DynamicStateInfos : List<DynamicStateInfo>, IList<DynamicStateInfo>, ICollection<DynamicStateInfo>, IList, ICollection, IReadOnlyList<DynamicStateInfo>, IReadOnlyCollection<DynamicStateInfo>, IEnumerable<DynamicStateInfo>, IEnumerable Methods Add(String, String) Add a DynamicStateInfo with less typing Declaration public void Add(string destinationState, string criterion) Parameters Type Name Description String destinationState String criterion Add<TState>(TState, String) Add a DynamicStateInfo with less typing Declaration public void Add<TState>(TState destinationState, string criterion) Parameters Type Name Description TState destinationState String criterion Type Parameters Name Description TState Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Stateless.Reflection.DynamicTransitionInfo.html": {
    "href": "api/Stateless.Reflection.DynamicTransitionInfo.html",
    "title": "Class DynamicTransitionInfo | Stateless For Unity documentation",
    "keywords": "Class DynamicTransitionInfo Describes a transition that can be initiated from a trigger, but whose result is non-deterministic. Inheritance Object TransitionInfo DynamicTransitionInfo Inherited Members TransitionInfo.Trigger TransitionInfo.GuardConditionsMethodDescriptions Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Reflection Assembly : cs.temp.dll.dll Syntax public class DynamicTransitionInfo : TransitionInfo Properties DestinationStateSelectorDescription Gets method information for the destination state selector. Declaration public InvocationInfo DestinationStateSelectorDescription { get; } Property Value Type Description InvocationInfo PossibleDestinationStates Gets the possible destination states. Declaration public DynamicStateInfos PossibleDestinationStates { get; } Property Value Type Description DynamicStateInfos Methods Create<TTrigger>(TTrigger, IEnumerable<InvocationInfo>, InvocationInfo, DynamicStateInfos) Creates a new instance of DynamicTransitionInfo . Declaration public static DynamicTransitionInfo Create<TTrigger>(TTrigger trigger, IEnumerable<InvocationInfo> guards, InvocationInfo selector, DynamicStateInfos possibleStates) Parameters Type Name Description TTrigger trigger The trigger associated with this transition. IEnumerable < InvocationInfo > guards The guard conditions associated with this transition. InvocationInfo selector The destination selector associated with this transition. DynamicStateInfos possibleStates The possible destination states. Returns Type Description DynamicTransitionInfo Type Parameters Name Description TTrigger The trigger type."
  },
  "api/Stateless.Reflection.FixedTransitionInfo.html": {
    "href": "api/Stateless.Reflection.FixedTransitionInfo.html",
    "title": "Class FixedTransitionInfo | Stateless For Unity documentation",
    "keywords": "Class FixedTransitionInfo Describes a transition that can be initiated from a trigger. Inheritance Object TransitionInfo FixedTransitionInfo Inherited Members TransitionInfo.Trigger TransitionInfo.GuardConditionsMethodDescriptions Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Reflection Assembly : cs.temp.dll.dll Syntax public class FixedTransitionInfo : TransitionInfo Properties DestinationState The state that will be transitioned into on activation. Declaration public StateInfo DestinationState { get; } Property Value Type Description StateInfo"
  },
  "api/Stateless.Reflection.html": {
    "href": "api/Stateless.Reflection.html",
    "title": "Namespace Stateless.Reflection | Stateless For Unity documentation",
    "keywords": "Namespace Stateless.Reflection Classes ActionInfo Information on entry and exit actions DynamicStateInfo DynamicStateInfos List of DynamicStateInfo objects, with \"add\" function for ease of definition DynamicTransitionInfo Describes a transition that can be initiated from a trigger, but whose result is non-deterministic. FixedTransitionInfo Describes a transition that can be initiated from a trigger. IgnoredTransitionInfo Describes a trigger that is \"ignored\" (stays in the same state) InvocationInfo Describes a method - either an action (activate, deactivate, etc.) or a transition guard StateInfo Describes an internal StateRepresentation through the reflection API. StateMachineInfo An info object which exposes the states, transitions, and actions of this machine. TransitionInfo TriggerInfo Represents a trigger in a statemachine. Enums InvocationInfo.Timing Is the method synchronous or asynchronous?"
  },
  "api/Stateless.Reflection.IgnoredTransitionInfo.html": {
    "href": "api/Stateless.Reflection.IgnoredTransitionInfo.html",
    "title": "Class IgnoredTransitionInfo | Stateless For Unity documentation",
    "keywords": "Class IgnoredTransitionInfo Describes a trigger that is \"ignored\" (stays in the same state) Inheritance Object TransitionInfo IgnoredTransitionInfo Inherited Members TransitionInfo.Trigger TransitionInfo.GuardConditionsMethodDescriptions Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Reflection Assembly : cs.temp.dll.dll Syntax public class IgnoredTransitionInfo : TransitionInfo"
  },
  "api/Stateless.Reflection.InvocationInfo.html": {
    "href": "api/Stateless.Reflection.InvocationInfo.html",
    "title": "Class InvocationInfo | Stateless For Unity documentation",
    "keywords": "Class InvocationInfo Describes a method - either an action (activate, deactivate, etc.) or a transition guard Inheritance Object InvocationInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Reflection Assembly : cs.temp.dll.dll Syntax public class InvocationInfo Constructors InvocationInfo(String, String, InvocationInfo.Timing) Creates a new instance of InvocationInfo . Declaration public InvocationInfo(string methodName, string description, InvocationInfo.Timing timing) Parameters Type Name Description String methodName The name of the invoked method. String description A description of the invoked method. InvocationInfo.Timing timing Sets a value indicating whether the method is invoked asynchronously. Properties DefaultFunctionDescription Text returned for compiler-generated functions where the caller has not specified a description Declaration public static string DefaultFunctionDescription { get; set; } Property Value Type Description String Description A description of the invoked method. Returns: The user-specified description, if any else if the method name is compiler-generated, returns DefaultFunctionDescription else the method name Declaration public string Description { get; } Property Value Type Description String IsAsync Returns true if the method is invoked asynchronously. Declaration public bool IsAsync { get; } Property Value Type Description Boolean MethodName The name of the invoked method. If the method is a lambda or delegate, the name will be a compiler-generated name that is often not human-friendly (e.g. \"(.ctor)b__2_0\" except with angle brackets instead of parentheses) Declaration public string MethodName { get; } Property Value Type Description String"
  },
  "api/Stateless.Reflection.InvocationInfo.Timing.html": {
    "href": "api/Stateless.Reflection.InvocationInfo.Timing.html",
    "title": "Enum InvocationInfo.Timing | Stateless For Unity documentation",
    "keywords": "Enum InvocationInfo.Timing Is the method synchronous or asynchronous? Namespace : Stateless.Reflection Assembly : cs.temp.dll.dll Syntax public enum Timing Fields Name Description Asynchronous Method is asynchronous Synchronous Method is synchronous"
  },
  "api/Stateless.Reflection.StateInfo.html": {
    "href": "api/Stateless.Reflection.StateInfo.html",
    "title": "Class StateInfo | Stateless For Unity documentation",
    "keywords": "Class StateInfo Describes an internal StateRepresentation through the reflection API. Inheritance Object StateInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Reflection Assembly : cs.temp.dll.dll Syntax public class StateInfo Properties ActivateActions Actions that are defined to be executed on activation. Declaration public IEnumerable<InvocationInfo> ActivateActions { get; } Property Value Type Description IEnumerable < InvocationInfo > DeactivateActions Actions that are defined to be executed on deactivation. Declaration public IEnumerable<InvocationInfo> DeactivateActions { get; } Property Value Type Description IEnumerable < InvocationInfo > DynamicTransitions Dynamic Transitions defined for this state internally. Declaration public IEnumerable<DynamicTransitionInfo> DynamicTransitions { get; } Property Value Type Description IEnumerable < DynamicTransitionInfo > EntryActions Actions that are defined to be executed on state-entry. Declaration public IEnumerable<ActionInfo> EntryActions { get; } Property Value Type Description IEnumerable < ActionInfo > ExitActions Actions that are defined to be exectuted on state-exit. Declaration public IEnumerable<InvocationInfo> ExitActions { get; } Property Value Type Description IEnumerable < InvocationInfo > FixedTransitions Transitions defined for this state. Declaration public IEnumerable<FixedTransitionInfo> FixedTransitions { get; } Property Value Type Description IEnumerable < FixedTransitionInfo > IgnoredTriggers Triggers ignored for this state. Declaration public IEnumerable<IgnoredTransitionInfo> IgnoredTriggers { get; } Property Value Type Description IEnumerable < IgnoredTransitionInfo > Substates Substates defined for this StateResource. Declaration public IEnumerable<StateInfo> Substates { get; } Property Value Type Description IEnumerable < StateInfo > Superstate Superstate defined, if any, for this StateResource. Declaration public StateInfo Superstate { get; } Property Value Type Description StateInfo Transitions Transitions defined for this state. Declaration public IEnumerable<TransitionInfo> Transitions { get; } Property Value Type Description IEnumerable < TransitionInfo > UnderlyingState The instance or value this state represents. Declaration public object UnderlyingState { get; } Property Value Type Description Object Methods ToString() Passes through to the value's ToString. Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Stateless.Reflection.StateMachineInfo.html": {
    "href": "api/Stateless.Reflection.StateMachineInfo.html",
    "title": "Class StateMachineInfo | Stateless For Unity documentation",
    "keywords": "Class StateMachineInfo An info object which exposes the states, transitions, and actions of this machine. Inheritance Object StateMachineInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Reflection Assembly : cs.temp.dll.dll Syntax public class StateMachineInfo Properties InitialState Exposes the initial state of this state machine. Declaration public StateInfo InitialState { get; } Property Value Type Description StateInfo States Exposes the states, transitions, and actions of this machine. Declaration public IEnumerable<StateInfo> States { get; } Property Value Type Description IEnumerable < StateInfo > StateType The type of the underlying state. Declaration public Type StateType { get; } Property Value Type Description Type TriggerType The type of the underlying trigger. Declaration public Type TriggerType { get; } Property Value Type Description Type"
  },
  "api/Stateless.Reflection.TransitionInfo.html": {
    "href": "api/Stateless.Reflection.TransitionInfo.html",
    "title": "Class TransitionInfo | Stateless For Unity documentation",
    "keywords": "Class TransitionInfo Inheritance Object TransitionInfo DynamicTransitionInfo FixedTransitionInfo IgnoredTransitionInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Reflection Assembly : cs.temp.dll.dll Syntax public abstract class TransitionInfo Fields GuardConditionsMethodDescriptions Method descriptions of the guard conditions. Returns a non-null but empty list if there are no guard conditions Declaration public IEnumerable<InvocationInfo> GuardConditionsMethodDescriptions Field Value Type Description IEnumerable < InvocationInfo > Properties Trigger The trigger whose firing resulted in this transition. Declaration public TriggerInfo Trigger { get; protected set; } Property Value Type Description TriggerInfo"
  },
  "api/Stateless.Reflection.TriggerInfo.html": {
    "href": "api/Stateless.Reflection.TriggerInfo.html",
    "title": "Class TriggerInfo | Stateless For Unity documentation",
    "keywords": "Class TriggerInfo Represents a trigger in a statemachine. Inheritance Object TriggerInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Stateless.Reflection Assembly : cs.temp.dll.dll Syntax public class TriggerInfo Properties UnderlyingTrigger The instance or value this trigger represents. Declaration public object UnderlyingTrigger { get; } Property Value Type Description Object Methods ToString() Describes the trigger. Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Stateless.StateMachine-2.html": {
    "href": "api/Stateless.StateMachine-2.html",
    "title": "Class StateMachine<TState, TTrigger> | Stateless For Unity documentation",
    "keywords": "Class StateMachine<TState, TTrigger> Models behaviour as transitions between a finite set of states. Inheritance Object StateMachine<TState, TTrigger> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Stateless Assembly : cs.temp.dll.dll Syntax public class StateMachine<TState, TTrigger> Type Parameters Name Description TState The type used to represent the states. TTrigger The type used to represent the triggers that cause state transitions. Constructors StateMachine(TState) Construct a state machine. Declaration public StateMachine(TState initialState) Parameters Type Name Description TState initialState The initial state. StateMachine(TState, FiringMode) Construct a state machine. Declaration public StateMachine(TState initialState, FiringMode firingMode) Parameters Type Name Description TState initialState The initial state. FiringMode firingMode Optional specification of fireing mode. StateMachine(Func<TState>, Action<TState>) Construct a state machine with external state storage. Declaration public StateMachine(Func<TState> stateAccessor, Action<TState> stateMutator) Parameters Type Name Description Func <TState> stateAccessor A function that will be called to read the current state value. Action <TState> stateMutator An action that will be called to write new state values. StateMachine(Func<TState>, Action<TState>, FiringMode) Construct a state machine with external state storage. Declaration public StateMachine(Func<TState> stateAccessor, Action<TState> stateMutator, FiringMode firingMode) Parameters Type Name Description Func <TState> stateAccessor A function that will be called to read the current state value. Action <TState> stateMutator An action that will be called to write new state values. FiringMode firingMode Optional specification of fireing mode. Properties PermittedTriggers The currently-permissible trigger values. Declaration public IEnumerable<TTrigger> PermittedTriggers { get; } Property Value Type Description IEnumerable <TTrigger> State The current state. Declaration public TState State { get; } Property Value Type Description TState Methods Activate() Activates current state. Actions associated with activating the current state will be invoked. The activation is idempotent and subsequent activation of the same current state will not lead to re-execution of activation callbacks. Declaration public void Activate() CanFire(TTrigger) Returns true if trigger can be fired in the current state. Declaration public bool CanFire(TTrigger trigger) Parameters Type Name Description TTrigger trigger Trigger to test. Returns Type Description Boolean True if the trigger can be fired, false otherwise. CanFire(TTrigger, out ICollection<String>) Returns true if trigger can be fired in the current state. Declaration public bool CanFire(TTrigger trigger, out ICollection<string> unmetGuards) Parameters Type Name Description TTrigger trigger Trigger to test. ICollection < String > unmetGuards Guard descriptions of unmet guards. If given trigger is not configured for current state, this will be null. Returns Type Description Boolean True if the trigger can be fired, false otherwise. Configure(TState) Begin configuration of the entry/exit actions and allowed transitions when the state machine is in a particular state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration Configure(TState state) Parameters Type Name Description TState state The state to configure. Returns Type Description StateMachine.StateConfiguration <> A configuration object through which the state can be configured. Deactivate() Deactivates current state. Actions associated with deactivating the current state will be invoked. The deactivation is idempotent and subsequent deactivation of the same current state will not lead to re-execution of deactivation callbacks. Declaration public void Deactivate() Fire(TTrigger) Transition from the current state via the specified trigger. The target state is determined by the configuration of the current state. Actions associated with leaving the current state and entering the new one will be invoked. Declaration public void Fire(TTrigger trigger) Parameters Type Name Description TTrigger trigger The trigger to fire. Exceptions Type Condition InvalidOperationException The current state does not allow the trigger to be fired. Fire(StateMachine<TState, TTrigger>.TriggerWithParameters, Object[]) Transition from the current state via the specified trigger. The target state is determined by the configuration of the current state. Actions associated with leaving the current state and entering the new one will be invoked. Declaration public void Fire(StateMachine<TState, TTrigger>.TriggerWithParameters trigger, params object[] args) Parameters Type Name Description StateMachine.TriggerWithParameters <> trigger The trigger to fire. Object [] args A variable-length parameters list containing arguments. Exceptions Type Condition InvalidOperationException The current state does not allow the trigger to be fired. Fire<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, TArg0) Transition from the current state via the specified trigger. The target state is determined by the configuration of the current state. Actions associated with leaving the current state and entering the new one will be invoked. Declaration public void Fire<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, TArg0 arg0) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The trigger to fire. TArg0 arg0 The first argument. Type Parameters Name Description TArg0 Type of the first trigger argument. Exceptions Type Condition InvalidOperationException The current state does not allow the trigger to be fired. Fire<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, TArg0, TArg1) Transition from the current state via the specified trigger. The target state is determined by the configuration of the current state. Actions associated with leaving the current state and entering the new one will be invoked. Declaration public void Fire<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, TArg0 arg0, TArg1 arg1) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The trigger to fire. TArg0 arg0 The first argument. TArg1 arg1 The second argument. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. Exceptions Type Condition InvalidOperationException The current state does not allow the trigger to be fired. Fire<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, TArg0, TArg1, TArg2) Transition from the current state via the specified trigger. The target state is determined by the configuration of the current state. Actions associated with leaving the current state and entering the new one will be invoked. Declaration public void Fire<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, TArg0 arg0, TArg1 arg1, TArg2 arg2) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The trigger to fire. TArg0 arg0 The first argument. TArg1 arg1 The second argument. TArg2 arg2 The third argument. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. TArg2 Type of the third trigger argument. Exceptions Type Condition InvalidOperationException The current state does not allow the trigger to be fired. GetInfo() Provides an info object which exposes the states, transitions, and actions of this machine. Declaration public StateMachineInfo GetInfo() Returns Type Description StateMachineInfo GetPermittedTriggers(Object[]) The currently-permissible trigger values. Declaration public IEnumerable<TTrigger> GetPermittedTriggers(params object[] args) Parameters Type Name Description Object [] args Returns Type Description IEnumerable <TTrigger> IsInState(TState) Determine if the state machine is in the supplied state. Declaration public bool IsInState(TState state) Parameters Type Name Description TState state The state to test for. Returns Type Description Boolean True if the current state is equal to, or a substate of, the supplied state. OnTransitionCompleted(Action<StateMachine<TState, TTrigger>.Transition>) Registers a callback that will be invoked every time the statemachine transitions from one state into another and all the OnEntryFrom etc methods have been invoked Declaration public void OnTransitionCompleted(Action<StateMachine<TState, TTrigger>.Transition> onTransitionAction) Parameters Type Name Description Action < StateMachine.Transition <>> onTransitionAction The action to execute, accepting the details of the transition. OnTransitioned(Action<StateMachine<TState, TTrigger>.Transition>) Registers a callback that will be invoked every time the state machine transitions from one state into another. Declaration public void OnTransitioned(Action<StateMachine<TState, TTrigger>.Transition> onTransitionAction) Parameters Type Name Description Action < StateMachine.Transition <>> onTransitionAction The action to execute, accepting the details of the transition. OnUnhandledTrigger(Action<TState, TTrigger, ICollection<String>>) Override the default behaviour of throwing an exception when an unhandled trigger is fired. Declaration public void OnUnhandledTrigger(Action<TState, TTrigger, ICollection<string>> unhandledTriggerAction) Parameters Type Name Description Action <TState, TTrigger, ICollection < String >> unhandledTriggerAction An action to call when an unhandled trigger is fired. OnUnhandledTrigger(Action<TState, TTrigger>) Override the default behaviour of throwing an exception when an unhandled trigger is fired. Declaration public void OnUnhandledTrigger(Action<TState, TTrigger> unhandledTriggerAction) Parameters Type Name Description Action <TState, TTrigger> unhandledTriggerAction An action to call when an unhandled trigger is fired. SetTriggerParameters(TTrigger, Type[]) Specify the arguments that must be supplied when a specific trigger is fired. Declaration public StateMachine<TState, TTrigger>.TriggerWithParameters SetTriggerParameters(TTrigger trigger, params Type[] argumentTypes) Parameters Type Name Description TTrigger trigger The underlying trigger value. Type [] argumentTypes The argument types expected by the trigger. Returns Type Description StateMachine.TriggerWithParameters <> An object that can be passed to the Fire() method in order to fire the parameterised trigger. SetTriggerParameters<TArg0>(TTrigger) Specify the arguments that must be supplied when a specific trigger is fired. Declaration public StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> SetTriggerParameters<TArg0>(TTrigger trigger) Parameters Type Name Description TTrigger trigger The underlying trigger value. Returns Type Description StateMachine.TriggerWithParameters <TArg0> An object that can be passed to the Fire() method in order to fire the parameterised trigger. Type Parameters Name Description TArg0 Type of the first trigger argument. SetTriggerParameters<TArg0, TArg1>(TTrigger) Specify the arguments that must be supplied when a specific trigger is fired. Declaration public StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> SetTriggerParameters<TArg0, TArg1>(TTrigger trigger) Parameters Type Name Description TTrigger trigger The underlying trigger value. Returns Type Description StateMachine.TriggerWithParameters <TArg0, TArg1> An object that can be passed to the Fire() method in order to fire the parameterised trigger. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. SetTriggerParameters<TArg0, TArg1, TArg2>(TTrigger) Specify the arguments that must be supplied when a specific trigger is fired. Declaration public StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> SetTriggerParameters<TArg0, TArg1, TArg2>(TTrigger trigger) Parameters Type Name Description TTrigger trigger The underlying trigger value. Returns Type Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> An object that can be passed to the Fire() method in order to fire the parameterised trigger. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. TArg2 Type of the third trigger argument. ToString() A human-readable representation of the state machine. Declaration public override string ToString() Returns Type Description String A description of the current state and permitted triggers. Overrides Object.ToString()"
  },
  "api/Stateless.StateMachine-2.InitialTransition.html": {
    "href": "api/Stateless.StateMachine-2.InitialTransition.html",
    "title": "Class StateMachine<TState, TTrigger>.InitialTransition | Stateless For Unity documentation",
    "keywords": "Class StateMachine<TState, TTrigger>.InitialTransition Describes an initial state transition. Inheritance Object StateMachine.Transition <> StateMachine<TState, TTrigger>.InitialTransition Inherited Members StateMachine<TState, TTrigger>.Transition.Source StateMachine<TState, TTrigger>.Transition.Destination StateMachine<TState, TTrigger>.Transition.Trigger StateMachine<TState, TTrigger>.Transition.IsReentry StateMachine<TState, TTrigger>.Transition.Parameters Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless Assembly : cs.temp.dll.dll Syntax public class InitialTransition : StateMachine<TState, TTrigger>.Transition Constructors InitialTransition(TState, TState, TTrigger, Object[]) Construct a transition. Declaration public InitialTransition(TState source, TState destination, TTrigger trigger, object[] parameters = null) Parameters Type Name Description TState source The state transitioned from. TState destination The state transitioned to. TTrigger trigger The trigger that caused the transition. Object [] parameters The optional trigger parameters"
  },
  "api/Stateless.StateMachine-2.StateConfiguration.html": {
    "href": "api/Stateless.StateMachine-2.StateConfiguration.html",
    "title": "Class StateMachine<TState, TTrigger>.StateConfiguration | Stateless For Unity documentation",
    "keywords": "Class StateMachine<TState, TTrigger>.StateConfiguration The configuration for a single state value. Inheritance Object StateMachine<TState, TTrigger>.StateConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless Assembly : cs.temp.dll.dll Syntax public class StateConfiguration Properties Machine The machine that is configured with this configuration. Declaration public StateMachine<TState, TTrigger> Machine { get; } Property Value Type Description StateMachine <TState, TTrigger> State The state that is configured with this configuration. Declaration public TState State { get; } Property Value Type Description TState Methods Ignore(TTrigger) Ignore the specified trigger when in the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration Ignore(TTrigger trigger) Parameters Type Name Description TTrigger trigger The trigger to ignore. Returns Type Description StateMachine.StateConfiguration <> The receiver. IgnoreIf(TTrigger, Func<Boolean>, String) Ignore the specified trigger when in the configured state, if the guard returns true.. Declaration public StateMachine<TState, TTrigger>.StateConfiguration IgnoreIf(TTrigger trigger, Func<bool> guard, string guardDescription = null) Parameters Type Name Description TTrigger trigger The trigger to ignore. Func < Boolean > guard Function that must return true in order for the trigger to be ignored. String guardDescription Guard description Returns Type Description StateMachine.StateConfiguration <> The receiver. IgnoreIf(TTrigger, Tuple<Func<Boolean>, String>[]) Ignore the specified trigger when in the configured state, if the guard returns true.. Declaration public StateMachine<TState, TTrigger>.StateConfiguration IgnoreIf(TTrigger trigger, params Tuple<Func<bool>, string>[] guards) Parameters Type Name Description TTrigger trigger The trigger to ignore. Tuple < Func < Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be ignored. Returns Type Description StateMachine.StateConfiguration <> The receiver. IgnoreIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Func<TArg0, Boolean>, String) Ignore the specified trigger when in the configured state, if the guard returns true.. Declaration public StateMachine<TState, TTrigger>.StateConfiguration IgnoreIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, Func<TArg0, bool> guard, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The trigger to ignore. Func <TArg0, Boolean > guard Function that must return true in order for the trigger to be ignored. String guardDescription Guard description Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 IgnoreIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Tuple<Func<TArg0, Boolean>, String>[]) Ignore the specified trigger when in the configured state, if the guard returns true.. Declaration public StateMachine<TState, TTrigger>.StateConfiguration IgnoreIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, params Tuple<Func<TArg0, bool>, string>[] guards) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The trigger to ignore. Tuple < Func <TArg0, Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be ignored. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 IgnoreIf<TArg0, TArgo1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArgo1>, Func<TArg0, TArgo1, Boolean>, String) Ignore the specified trigger when in the configured state, if the guard returns true.. Declaration public StateMachine<TState, TTrigger>.StateConfiguration IgnoreIf<TArg0, TArgo1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArgo1> trigger, Func<TArg0, TArgo1, bool> guard, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArgo1> trigger The trigger to ignore. Func <TArg0, TArgo1, Boolean > guard Function that must return true in order for the trigger to be ignored. String guardDescription Guard description Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 TArgo1 IgnoreIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, Tuple<Func<TArg0, TArg1, Boolean>, String>[]) Ignore the specified trigger when in the configured state, if the guard returns true.. Declaration public StateMachine<TState, TTrigger>.StateConfiguration IgnoreIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, params Tuple<Func<TArg0, TArg1, bool>, string>[] guards) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The trigger to ignore. Tuple < Func <TArg0, TArg1, Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be ignored. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 TArg1 IgnoreIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Func<TArg0, TArg1, TArg2, Boolean>, String) Ignore the specified trigger when in the configured state, if the guard returns true.. Declaration public StateMachine<TState, TTrigger>.StateConfiguration IgnoreIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, Func<TArg0, TArg1, TArg2, bool> guard, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The trigger to ignore. Func <TArg0, TArg1, TArg2, Boolean > guard Function that must return true in order for the trigger to be ignored. String guardDescription Guard description Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 TArg1 TArg2 IgnoreIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Tuple<Func<TArg0, TArg1, TArg2, Boolean>, String>[]) Ignore the specified trigger when in the configured state, if the guard returns true.. Declaration public StateMachine<TState, TTrigger>.StateConfiguration IgnoreIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, params Tuple<Func<TArg0, TArg1, TArg2, bool>, string>[] guards) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The trigger to ignore. Tuple < Func <TArg0, TArg1, TArg2, Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be ignored. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 TArg1 TArg2 InitialTransition(TState) Adds internal transition to this state. When entering the current state the state machine will look for an initial transition, and enter the target state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration InitialTransition(TState targetState) Parameters Type Name Description TState targetState The target initial state Returns Type Description StateMachine.StateConfiguration <> A stateConfiguration object InternalTransition(TTrigger, Action) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransition(TTrigger trigger, Action internalAction) Parameters Type Name Description TTrigger trigger The accepted trigger Action internalAction The action performed by the internal transition Returns Type Description StateMachine.StateConfiguration <> InternalTransition(TTrigger, Action<StateMachine<TState, TTrigger>.Transition>) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransition(TTrigger trigger, Action<StateMachine<TState, TTrigger>.Transition> entryAction) Parameters Type Name Description TTrigger trigger Action < StateMachine.Transition <>> entryAction Returns Type Description StateMachine.StateConfiguration <> InternalTransition<TArg0>(TTrigger, Action<StateMachine<TState, TTrigger>.Transition>) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransition<TArg0>(TTrigger trigger, Action<StateMachine<TState, TTrigger>.Transition> internalAction) Parameters Type Name Description TTrigger trigger The accepted trigger Action < StateMachine.Transition <>> internalAction The action performed by the internal transition Returns Type Description StateMachine.StateConfiguration <> Type Parameters Name Description TArg0 InternalTransition<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Action<TArg0, StateMachine<TState, TTrigger>.Transition>) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransition<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, Action<TArg0, StateMachine<TState, TTrigger>.Transition> internalAction) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The accepted trigger Action <TArg0, StateMachine.Transition <>> internalAction The action performed by the internal transition Returns Type Description StateMachine.StateConfiguration <> Type Parameters Name Description TArg0 InternalTransition<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, Action<TArg0, TArg1, StateMachine<TState, TTrigger>.Transition>) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransition<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, Action<TArg0, TArg1, StateMachine<TState, TTrigger>.Transition> internalAction) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The accepted trigger Action <TArg0, TArg1, StateMachine.Transition <>> internalAction The action performed by the internal transition Returns Type Description StateMachine.StateConfiguration <> Type Parameters Name Description TArg0 TArg1 InternalTransition<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Action<TArg0, TArg1, TArg2, StateMachine<TState, TTrigger>.Transition>) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransition<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, Action<TArg0, TArg1, TArg2, StateMachine<TState, TTrigger>.Transition> internalAction) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The accepted trigger Action <TArg0, TArg1, TArg2, StateMachine.Transition <>> internalAction The action performed by the internal transition Returns Type Description StateMachine.StateConfiguration <> Type Parameters Name Description TArg0 TArg1 TArg2 InternalTransitionIf(TTrigger, Func<Object[], Boolean>, Action, String) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransitionIf(TTrigger trigger, Func<object[], bool> guard, Action internalAction, string guardDescription = null) Parameters Type Name Description TTrigger trigger The accepted trigger Func < Object [], Boolean > guard Function that must return true in order for the trigger to be accepted. Action internalAction The action performed by the internal transition String guardDescription A description of the guard condition Returns Type Description StateMachine.StateConfiguration <> InternalTransitionIf(TTrigger, Func<Object[], Boolean>, Action<StateMachine<TState, TTrigger>.Transition>, String) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransitionIf(TTrigger trigger, Func<object[], bool> guard, Action<StateMachine<TState, TTrigger>.Transition> entryAction, string guardDescription = null) Parameters Type Name Description TTrigger trigger Func < Object [], Boolean > guard Function that must return true in order for the trigger to be accepted. Action < StateMachine.Transition <>> entryAction String guardDescription A description of the guard condition Returns Type Description StateMachine.StateConfiguration <> InternalTransitionIf<TArg0>(TTrigger, Func<Object[], Boolean>, Action<StateMachine<TState, TTrigger>.Transition>, String) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransitionIf<TArg0>(TTrigger trigger, Func<object[], bool> guard, Action<StateMachine<TState, TTrigger>.Transition> internalAction, string guardDescription = null) Parameters Type Name Description TTrigger trigger The accepted trigger Func < Object [], Boolean > guard Function that must return true in order for the trigger to be accepted. Action < StateMachine.Transition <>> internalAction The action performed by the internal transition String guardDescription A description of the guard condition Returns Type Description StateMachine.StateConfiguration <> Type Parameters Name Description TArg0 InternalTransitionIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Func<TArg0, Boolean>, Action<TArg0, StateMachine<TState, TTrigger>.Transition>, String) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransitionIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, Func<TArg0, bool> guard, Action<TArg0, StateMachine<TState, TTrigger>.Transition> internalAction, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The accepted trigger Func <TArg0, Boolean > guard Function that must return true in order for the trigger to be accepted. Action <TArg0, StateMachine.Transition <>> internalAction The action performed by the internal transition String guardDescription A description of the guard condition Returns Type Description StateMachine.StateConfiguration <> Type Parameters Name Description TArg0 InternalTransitionIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, Func<TArg0, TArg1, Boolean>, Action<TArg0, TArg1, StateMachine<TState, TTrigger>.Transition>, String) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransitionIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, Func<TArg0, TArg1, bool> guard, Action<TArg0, TArg1, StateMachine<TState, TTrigger>.Transition> internalAction, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The accepted trigger Func <TArg0, TArg1, Boolean > guard Function that must return true in order for the trigger to be accepted. Action <TArg0, TArg1, StateMachine.Transition <>> internalAction The action performed by the internal transition String guardDescription A description of the guard condition Returns Type Description StateMachine.StateConfiguration <> Type Parameters Name Description TArg0 TArg1 InternalTransitionIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, Func<Object[], Boolean>, Action<TArg0, TArg1, StateMachine<TState, TTrigger>.Transition>, String) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransitionIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, Func<object[], bool> guard, Action<TArg0, TArg1, StateMachine<TState, TTrigger>.Transition> internalAction, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The accepted trigger Func < Object [], Boolean > guard Function that must return true in order for the trigger to be accepted. Action <TArg0, TArg1, StateMachine.Transition <>> internalAction The action performed by the internal transition String guardDescription A description of the guard condition Returns Type Description StateMachine.StateConfiguration <> Type Parameters Name Description TArg0 TArg1 InternalTransitionIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Func<TArg0, TArg1, TArg2, Boolean>, Action<TArg0, TArg1, TArg2, StateMachine<TState, TTrigger>.Transition>, String) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransitionIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, Func<TArg0, TArg1, TArg2, bool> guard, Action<TArg0, TArg1, TArg2, StateMachine<TState, TTrigger>.Transition> internalAction, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The accepted trigger Func <TArg0, TArg1, TArg2, Boolean > guard Function that must return true in order for the trigger to be accepted. Action <TArg0, TArg1, TArg2, StateMachine.Transition <>> internalAction The action performed by the internal transition String guardDescription A description of the guard condition Returns Type Description StateMachine.StateConfiguration <> Type Parameters Name Description TArg0 TArg1 TArg2 InternalTransitionIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Func<Object[], Boolean>, Action<TArg0, TArg1, TArg2, StateMachine<TState, TTrigger>.Transition>, String) Add an internal transition to the state machine. An internal action does not cause the Exit and Entry actions to be triggered, and does not change the state of the state machine Declaration public StateMachine<TState, TTrigger>.StateConfiguration InternalTransitionIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, Func<object[], bool> guard, Action<TArg0, TArg1, TArg2, StateMachine<TState, TTrigger>.Transition> internalAction, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The accepted trigger Func < Object [], Boolean > guard Function that must return true in order for the trigger to be accepted. Action <TArg0, TArg1, TArg2, StateMachine.Transition <>> internalAction The action performed by the internal transition String guardDescription A description of the guard condition Returns Type Description StateMachine.StateConfiguration <> Type Parameters Name Description TArg0 TArg1 TArg2 OnActivate(Action, String) Specify an action that will execute when activating the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnActivate(Action activateAction, string activateActionDescription = null) Parameters Type Name Description Action activateAction Action to execute. String activateActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. OnDeactivate(Action, String) Specify an action that will execute when deactivating the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnDeactivate(Action deactivateAction, string deactivateActionDescription = null) Parameters Type Name Description Action deactivateAction Action to execute. String deactivateActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. OnEntry(Action, String) Specify an action that will execute when transitioning into the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnEntry(Action entryAction, string entryActionDescription = null) Parameters Type Name Description Action entryAction Action to execute. String entryActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. OnEntry(Action<StateMachine<TState, TTrigger>.Transition>, String) Specify an action that will execute when transitioning into the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnEntry(Action<StateMachine<TState, TTrigger>.Transition> entryAction, string entryActionDescription = null) Parameters Type Name Description Action < StateMachine.Transition <>> entryAction Action to execute, providing details of the transition. String entryActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. OnEntryFrom(TTrigger, Action, String) Specify an action that will execute when transitioning into the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnEntryFrom(TTrigger trigger, Action entryAction, string entryActionDescription = null) Parameters Type Name Description TTrigger trigger The trigger by which the state must be entered in order for the action to execute. Action entryAction Action to execute. String entryActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. OnEntryFrom(TTrigger, Action<StateMachine<TState, TTrigger>.Transition>, String) Specify an action that will execute when transitioning into the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnEntryFrom(TTrigger trigger, Action<StateMachine<TState, TTrigger>.Transition> entryAction, string entryActionDescription = null) Parameters Type Name Description TTrigger trigger The trigger by which the state must be entered in order for the action to execute. Action < StateMachine.Transition <>> entryAction Action to execute, providing details of the transition. String entryActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. OnEntryFrom(StateMachine<TState, TTrigger>.TriggerWithParameters, Action<StateMachine<TState, TTrigger>.Transition>, String) Specify an action that will execute when transitioning into the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnEntryFrom(StateMachine<TState, TTrigger>.TriggerWithParameters trigger, Action<StateMachine<TState, TTrigger>.Transition> entryAction, string entryActionDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <> trigger The trigger by which the state must be entered in order for the action to execute. Action < StateMachine.Transition <>> entryAction Action to execute, providing details of the transition. String entryActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. OnEntryFrom<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Action<TArg0, StateMachine<TState, TTrigger>.Transition>, String) Specify an action that will execute when transitioning into the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnEntryFrom<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, Action<TArg0, StateMachine<TState, TTrigger>.Transition> entryAction, string entryActionDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The trigger by which the state must be entered in order for the action to execute. Action <TArg0, StateMachine.Transition <>> entryAction Action to execute, providing details of the transition. String entryActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. OnEntryFrom<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Action<TArg0>, String) Specify an action that will execute when transitioning into the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnEntryFrom<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, Action<TArg0> entryAction, string entryActionDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The trigger by which the state must be entered in order for the action to execute. Action <TArg0> entryAction Action to execute, providing details of the transition. String entryActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. OnEntryFrom<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, Action<TArg0, TArg1, StateMachine<TState, TTrigger>.Transition>, String) Specify an action that will execute when transitioning into the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnEntryFrom<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, Action<TArg0, TArg1, StateMachine<TState, TTrigger>.Transition> entryAction, string entryActionDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The trigger by which the state must be entered in order for the action to execute. Action <TArg0, TArg1, StateMachine.Transition <>> entryAction Action to execute, providing details of the transition. String entryActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. OnEntryFrom<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, Action<TArg0, TArg1>, String) Specify an action that will execute when transitioning into the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnEntryFrom<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, Action<TArg0, TArg1> entryAction, string entryActionDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The trigger by which the state must be entered in order for the action to execute. Action <TArg0, TArg1> entryAction Action to execute, providing details of the transition. String entryActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. OnEntryFrom<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Action<TArg0, TArg1, TArg2, StateMachine<TState, TTrigger>.Transition>, String) Specify an action that will execute when transitioning into the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnEntryFrom<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, Action<TArg0, TArg1, TArg2, StateMachine<TState, TTrigger>.Transition> entryAction, string entryActionDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The trigger by which the state must be entered in order for the action to execute. Action <TArg0, TArg1, TArg2, StateMachine.Transition <>> entryAction Action to execute, providing details of the transition. String entryActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. TArg2 Type of the third trigger argument. OnEntryFrom<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Action<TArg0, TArg1, TArg2>, String) Specify an action that will execute when transitioning into the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnEntryFrom<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, Action<TArg0, TArg1, TArg2> entryAction, string entryActionDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The trigger by which the state must be entered in order for the action to execute. Action <TArg0, TArg1, TArg2> entryAction Action to execute, providing details of the transition. String entryActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. TArg2 Type of the third trigger argument. OnExit(Action, String) Specify an action that will execute when transitioning from the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnExit(Action exitAction, string exitActionDescription = null) Parameters Type Name Description Action exitAction Action to execute. String exitActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. OnExit(Action<StateMachine<TState, TTrigger>.Transition>, String) Specify an action that will execute when transitioning from the configured state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration OnExit(Action<StateMachine<TState, TTrigger>.Transition> exitAction, string exitActionDescription = null) Parameters Type Name Description Action < StateMachine.Transition <>> exitAction Action to execute, providing details of the transition. String exitActionDescription Action description. Returns Type Description StateMachine.StateConfiguration <> The receiver. Permit(TTrigger, TState) Accept the specified trigger and transition to the destination state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration Permit(TTrigger trigger, TState destinationState) Parameters Type Name Description TTrigger trigger The accepted trigger. TState destinationState The state that the trigger will cause a transition to. Returns Type Description StateMachine.StateConfiguration <> The receiver. PermitDynamic(TTrigger, Func<TState>, String, DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamic(TTrigger trigger, Func<TState> destinationStateSelector, string destinationStateSelectorDescription = null, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description TTrigger trigger The accepted trigger. Func <TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. String destinationStateSelectorDescription Optional description for the function to calculate the state DynamicStateInfos possibleDestinationStates Optional array of possible destination states (used by output formatters) Returns Type Description StateMachine.StateConfiguration <> The receiver. PermitDynamic<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Func<TArg0, TState>, String, DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamic<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, Func<TArg0, TState> destinationStateSelector, string destinationStateSelectorDescription = null, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The accepted trigger. Func <TArg0, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. String destinationStateSelectorDescription Optional description of the function to calculate the state DynamicStateInfos possibleDestinationStates Optional list of possible target states. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. PermitDynamic<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, Func<TArg0, TArg1, TState>, String, DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamic<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, Func<TArg0, TArg1, TState> destinationStateSelector, string destinationStateSelectorDescription = null, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The accepted trigger. Func <TArg0, TArg1, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. String destinationStateSelectorDescription Optional description of the function to calculate the state DynamicStateInfos possibleDestinationStates Optional list of possible target states. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. PermitDynamic<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Func<TArg0, TArg1, TArg2, TState>, String, DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamic<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, Func<TArg0, TArg1, TArg2, TState> destinationStateSelector, string destinationStateSelectorDescription = null, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The accepted trigger. Func <TArg0, TArg1, TArg2, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. String destinationStateSelectorDescription Optional description of the function to calculate the state DynamicStateInfos possibleDestinationStates Optional list of possible target states. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. TArg2 Type of the third trigger argument. PermitDynamicIf(TTrigger, Func<TState>, DynamicStateInfos, Tuple<Func<Boolean>, String>[]) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf(TTrigger trigger, Func<TState> destinationStateSelector, DynamicStateInfos possibleDestinationStates = null, params Tuple<Func<bool>, string>[] guards) Parameters Type Name Description TTrigger trigger The accepted trigger. Func <TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. DynamicStateInfos possibleDestinationStates Optional list of possible target states. Tuple < Func < Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be accepted. Returns Type Description StateMachine.StateConfiguration <> The receiver. PermitDynamicIf(TTrigger, Func<TState>, Func<Boolean>, String, DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf(TTrigger trigger, Func<TState> destinationStateSelector, Func<bool> guard, string guardDescription = null, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description TTrigger trigger The accepted trigger. Func <TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. Func < Boolean > guard Function that must return true in order for the trigger to be accepted. String guardDescription Guard description DynamicStateInfos possibleDestinationStates Optional list of possible target states. Returns Type Description StateMachine.StateConfiguration <> The receiver. PermitDynamicIf(TTrigger, Func<TState>, String, DynamicStateInfos, Tuple<Func<Boolean>, String>[]) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf(TTrigger trigger, Func<TState> destinationStateSelector, string destinationStateSelectorDescription, DynamicStateInfos possibleDestinationStates = null, params Tuple<Func<bool>, string>[] guards) Parameters Type Name Description TTrigger trigger The accepted trigger. Func <TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. String destinationStateSelectorDescription Description of the function to calculate the state DynamicStateInfos possibleDestinationStates Optional list of possible target states. Tuple < Func < Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be accepted. Returns Type Description StateMachine.StateConfiguration <> The receiver. PermitDynamicIf(TTrigger, Func<TState>, String, Func<Boolean>, String, DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf(TTrigger trigger, Func<TState> destinationStateSelector, string destinationStateSelectorDescription, Func<bool> guard, string guardDescription = null, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description TTrigger trigger The accepted trigger. Func <TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. String destinationStateSelectorDescription Description of the function to calculate the state Func < Boolean > guard Function that must return true in order for the trigger to be accepted. String guardDescription Guard description DynamicStateInfos possibleDestinationStates Optional list of possible target states. Returns Type Description StateMachine.StateConfiguration <> The receiver. PermitDynamicIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Func<TArg0, TState>) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, Func<TArg0, TState> destinationStateSelector) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The accepted trigger. Func <TArg0, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. PermitDynamicIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Func<TArg0, TState>, DynamicStateInfos, Tuple<Func<TArg0, Boolean>, String>[]) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, Func<TArg0, TState> destinationStateSelector, DynamicStateInfos possibleDestinationStates = null, params Tuple<Func<TArg0, bool>, string>[] guards) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The accepted trigger. Func <TArg0, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. DynamicStateInfos possibleDestinationStates Optional list of possible target states. Tuple < Func <TArg0, Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be accepted. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. PermitDynamicIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Func<TArg0, TState>, DynamicStateInfos, Tuple<Func<Boolean>, String>[]) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, Func<TArg0, TState> destinationStateSelector, DynamicStateInfos possibleDestinationStates = null, params Tuple<Func<bool>, string>[] guards) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The accepted trigger. Func <TArg0, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. DynamicStateInfos possibleDestinationStates Optional list of possible target states. Tuple < Func < Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be accepted. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. PermitDynamicIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Func<TArg0, TState>, Func<TArg0, Boolean>, String, DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, Func<TArg0, TState> destinationStateSelector, Func<TArg0, bool> guard, string guardDescription = null, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The accepted trigger. Func <TArg0, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. Func <TArg0, Boolean > guard Parameterized Function that must return true in order for the trigger to be accepted. String guardDescription Guard description DynamicStateInfos possibleDestinationStates Optional list of possible target states. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. PermitDynamicIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Func<TArg0, TState>, Func<Boolean>, String, DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, Func<TArg0, TState> destinationStateSelector, Func<bool> guard, string guardDescription = null, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The accepted trigger. Func <TArg0, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. Func < Boolean > guard Function that must return true in order for the trigger to be accepted. String guardDescription Guard description DynamicStateInfos possibleDestinationStates Optional list of possible target states. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. PermitDynamicIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, Func<TArg0, TArg1, TState>, DynamicStateInfos, Tuple<Func<Boolean>, String>[]) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, Func<TArg0, TArg1, TState> destinationStateSelector, DynamicStateInfos possibleDestinationStates = null, params Tuple<Func<bool>, string>[] guards) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The accepted trigger. Func <TArg0, TArg1, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. DynamicStateInfos possibleDestinationStates Optional list of possible target states. Tuple < Func < Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be accepted. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. PermitDynamicIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, Func<TArg0, TArg1, TState>, Func<TArg0, TArg1, Boolean>, String, DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, Func<TArg0, TArg1, TState> destinationStateSelector, Func<TArg0, TArg1, bool> guard, string guardDescription = null, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The accepted trigger. Func <TArg0, TArg1, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. Func <TArg0, TArg1, Boolean > guard Function that must return true in order for the trigger to be accepted. String guardDescription Guard description DynamicStateInfos possibleDestinationStates Optional list of possible target states. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. PermitDynamicIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, Func<TArg0, TArg1, TState>, Func<Boolean>, String, DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, Func<TArg0, TArg1, TState> destinationStateSelector, Func<bool> guard, string guardDescription = null, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The accepted trigger. Func <TArg0, TArg1, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. Func < Boolean > guard Function that must return true in order for the trigger to be accepted. String guardDescription Guard description DynamicStateInfos possibleDestinationStates Optional list of possible target states. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. PermitDynamicIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, Func<TArg0, TArg1, TState>, Tuple<Func<TArg0, TArg1, Boolean>, String>[], DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, Func<TArg0, TArg1, TState> destinationStateSelector, Tuple<Func<TArg0, TArg1, bool>, string>[] guards, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The accepted trigger. Func <TArg0, TArg1, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. Tuple < Func <TArg0, TArg1, Boolean >, String >[] guards Functions that must return true in order for the trigger to be accepted. DynamicStateInfos possibleDestinationStates Optional list of possible target states. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. PermitDynamicIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Func<TArg0, TArg1, TArg2, TState>, DynamicStateInfos, Tuple<Func<Boolean>, String>[]) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, Func<TArg0, TArg1, TArg2, TState> destinationStateSelector, DynamicStateInfos possibleDestinationStates = null, params Tuple<Func<bool>, string>[] guards) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The accepted trigger. Func <TArg0, TArg1, TArg2, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. DynamicStateInfos possibleDestinationStates Optional list of possible target states. Tuple < Func < Boolean >, String >[] guards Functions ant their descriptions that must return true in order for the trigger to be accepted. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. TArg2 Type of the third trigger argument. PermitDynamicIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Func<TArg0, TArg1, TArg2, TState>, Func<TArg0, TArg1, TArg2, Boolean>, String, DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, Func<TArg0, TArg1, TArg2, TState> destinationStateSelector, Func<TArg0, TArg1, TArg2, bool> guard, string guardDescription = null, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The accepted trigger. Func <TArg0, TArg1, TArg2, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. Func <TArg0, TArg1, TArg2, Boolean > guard Function that must return true in order for the trigger to be accepted. String guardDescription Guard description DynamicStateInfos possibleDestinationStates Optional list of possible target states. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. TArg2 PermitDynamicIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Func<TArg0, TArg1, TArg2, TState>, Func<Boolean>, String, DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, Func<TArg0, TArg1, TArg2, TState> destinationStateSelector, Func<bool> guard, string guardDescription = null, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The accepted trigger. Func <TArg0, TArg1, TArg2, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. Func < Boolean > guard Function that must return true in order for the trigger to be accepted. String guardDescription Guard description DynamicStateInfos possibleDestinationStates Optional list of possible target states. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. TArg2 Type of the third trigger argument. PermitDynamicIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Func<TArg0, TArg1, TArg2, TState>, Tuple<Func<TArg0, TArg1, TArg2, Boolean>, String>[], DynamicStateInfos) Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitDynamicIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, Func<TArg0, TArg1, TArg2, TState> destinationStateSelector, Tuple<Func<TArg0, TArg1, TArg2, bool>, string>[] guards, DynamicStateInfos possibleDestinationStates = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The accepted trigger. Func <TArg0, TArg1, TArg2, TState> destinationStateSelector Function to calculate the state that the trigger will cause a transition to. Tuple < Func <TArg0, TArg1, TArg2, Boolean >, String >[] guards Functions that must return true in order for the trigger to be accepted. DynamicStateInfos possibleDestinationStates Optional list of possible target states. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 Type of the first trigger argument. TArg1 Type of the second trigger argument. TArg2 PermitIf(TTrigger, TState, Func<Boolean>, String) Accept the specified trigger and transition to the destination state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitIf(TTrigger trigger, TState destinationState, Func<bool> guard, string guardDescription = null) Parameters Type Name Description TTrigger trigger The accepted trigger. TState destinationState The state that the trigger will cause a transition to. Func < Boolean > guard Function that must return true in order for the trigger to be accepted. String guardDescription Guard description Returns Type Description StateMachine.StateConfiguration <> The receiver. PermitIf(TTrigger, TState, Tuple<Func<Boolean>, String>[]) Accept the specified trigger and transition to the destination state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitIf(TTrigger trigger, TState destinationState, params Tuple<Func<bool>, string>[] guards) Parameters Type Name Description TTrigger trigger The accepted trigger. TState destinationState State of the destination. Tuple < Func < Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be accepted. Returns Type Description StateMachine.StateConfiguration <> The receiver. PermitIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, TState, Func<TArg0, Boolean>, String) Accept the specified trigger, transition to the destination state, and guard condition. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, TState destinationState, Func<TArg0, bool> guard, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The accepted trigger. TState destinationState The state that the trigger will cause a transition to. Func <TArg0, Boolean > guard Function that must return true in order for the trigger to be accepted. Takes a single argument of type TArg0 String guardDescription Guard description Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 PermitIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, TState, Tuple<Func<TArg0, Boolean>, String>[]) Accept the specified trigger, transition to the destination state, and guard conditions. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, TState destinationState, params Tuple<Func<TArg0, bool>, string>[] guards) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The accepted trigger. TState destinationState State of the destination. Tuple < Func <TArg0, Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be accepted. Functions take a single argument of type TArg0. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 PermitIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, TState, Func<TArg0, TArg1, Boolean>, String) Accept the specified trigger, transition to the destination state, and guard condition. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, TState destinationState, Func<TArg0, TArg1, bool> guard, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The accepted trigger. TState destinationState The state that the trigger will cause a transition to. Func <TArg0, TArg1, Boolean > guard Function that must return true in order for the trigger to be accepted. Takes a single argument of type TArg0 String guardDescription Guard description Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 TArg1 PermitIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, TState, Tuple<Func<TArg0, TArg1, Boolean>, String>[]) Accept the specified trigger, transition to the destination state, and guard condition. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, TState destinationState, params Tuple<Func<TArg0, TArg1, bool>, string>[] guards) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The accepted trigger. TState destinationState State of the destination. Tuple < Func <TArg0, TArg1, Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be accepted. Functions take a single argument of type TArg0. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 TArg1 PermitIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, TState, Func<TArg0, TArg1, TArg2, Boolean>, String) Accept the specified trigger, transition to the destination state, and guard condition. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, TState destinationState, Func<TArg0, TArg1, TArg2, bool> guard, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The accepted trigger. TState destinationState The state that the trigger will cause a transition to. Func <TArg0, TArg1, TArg2, Boolean > guard Function that must return true in order for the trigger to be accepted. Takes a single argument of type TArg0 String guardDescription Guard description Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 TArg1 TArg2 PermitIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, TState, Tuple<Func<TArg0, TArg1, TArg2, Boolean>, String>[]) Accept the specified trigger, transition to the destination state, and guard condition. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, TState destinationState, params Tuple<Func<TArg0, TArg1, TArg2, bool>, string>[] guards) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The accepted trigger. TState destinationState State of the destination. Tuple < Func <TArg0, TArg1, TArg2, Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be accepted. Functions take a single argument of type TArg0. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 TArg1 TArg2 PermitReentry(TTrigger) Accept the specified trigger, execute exit actions and re-execute entry actions. Reentry behaves as though the configured state transitions to an identical sibling state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitReentry(TTrigger trigger) Parameters Type Name Description TTrigger trigger The accepted trigger. Returns Type Description StateMachine.StateConfiguration <> The receiver. Remarks Applies to the current state only. Will not re-execute superstate actions, or cause actions to execute transitioning between super- and sub-states. PermitReentryIf(TTrigger, Func<Boolean>, String) Accept the specified trigger, execute exit actions and re-execute entry actions. Reentry behaves as though the configured state transitions to an identical sibling state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitReentryIf(TTrigger trigger, Func<bool> guard, string guardDescription = null) Parameters Type Name Description TTrigger trigger The accepted trigger. Func < Boolean > guard Function that must return true in order for the trigger to be accepted. String guardDescription Guard description Returns Type Description StateMachine.StateConfiguration <> The receiver. Remarks Applies to the current state only. Will not re-execute superstate actions, or cause actions to execute transitioning between super- and sub-states. PermitReentryIf(TTrigger, Tuple<Func<Boolean>, String>[]) Accept the specified trigger, execute exit actions and re-execute entry actions. Reentry behaves as though the configured state transitions to an identical sibling state. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitReentryIf(TTrigger trigger, params Tuple<Func<bool>, string>[] guards) Parameters Type Name Description TTrigger trigger The accepted trigger. Tuple < Func < Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be accepted. Returns Type Description StateMachine.StateConfiguration <> The receiver. Remarks Applies to the current state only. Will not re-execute superstate actions, or cause actions to execute transitioning between super- and sub-states. PermitReentryIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Func<TArg0, Boolean>, String) Accept the specified trigger, transition to the destination state, and guard condition. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitReentryIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, Func<TArg0, bool> guard, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The accepted trigger. Func <TArg0, Boolean > guard Function that must return true in order for the trigger to be accepted. Takes a single argument of type TArg0 String guardDescription Guard description Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 PermitReentryIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0>, Tuple<Func<TArg0, Boolean>, String>[]) Accept the specified trigger, transition to the destination state, and guard conditions. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitReentryIf<TArg0>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> trigger, params Tuple<Func<TArg0, bool>, string>[] guards) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0> trigger The accepted trigger. Tuple < Func <TArg0, Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be accepted. Functions take a single argument of type TArg0. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 PermitReentryIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, Func<TArg0, TArg1, Boolean>, String) Accept the specified trigger, transition to the destination state, and guard condition. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitReentryIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, Func<TArg0, TArg1, bool> guard, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The accepted trigger. Func <TArg0, TArg1, Boolean > guard Function that must return true in order for the trigger to be accepted. Takes a single argument of type TArg0 String guardDescription Guard description Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 TArg1 PermitReentryIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1>, Tuple<Func<TArg0, TArg1, Boolean>, String>[]) Accept the specified trigger, transition to the destination state, and guard condition. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitReentryIf<TArg0, TArg1>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> trigger, params Tuple<Func<TArg0, TArg1, bool>, string>[] guards) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1> trigger The accepted trigger. Tuple < Func <TArg0, TArg1, Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be accepted. Functions take a single argument of type TArg0. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 TArg1 PermitReentryIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Func<TArg0, TArg1, TArg2, Boolean>, String) Accept the specified trigger, transition to the destination state, and guard condition. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitReentryIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, Func<TArg0, TArg1, TArg2, bool> guard, string guardDescription = null) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The accepted trigger. Func <TArg0, TArg1, TArg2, Boolean > guard Function that must return true in order for the trigger to be accepted. Takes a single argument of type TArg0 String guardDescription Guard description Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 TArg1 TArg2 PermitReentryIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2>, Tuple<Func<TArg0, TArg1, TArg2, Boolean>, String>[]) Accept the specified trigger, transition to the destination state, and guard condition. Declaration public StateMachine<TState, TTrigger>.StateConfiguration PermitReentryIf<TArg0, TArg1, TArg2>(StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> trigger, params Tuple<Func<TArg0, TArg1, TArg2, bool>, string>[] guards) Parameters Type Name Description StateMachine.TriggerWithParameters <TArg0, TArg1, TArg2> trigger The accepted trigger. Tuple < Func <TArg0, TArg1, TArg2, Boolean >, String >[] guards Functions and their descriptions that must return true in order for the trigger to be accepted. Functions take a single argument of type TArg0. Returns Type Description StateMachine.StateConfiguration <> The receiver. Type Parameters Name Description TArg0 TArg1 TArg2 SubstateOf(TState) Sets the superstate that the configured state is a substate of. Declaration public StateMachine<TState, TTrigger>.StateConfiguration SubstateOf(TState superstate) Parameters Type Name Description TState superstate The superstate. Returns Type Description StateMachine.StateConfiguration <> The receiver. Remarks Substates inherit the allowed transitions of their superstate. When entering directly into a substate from outside of the superstate, entry actions for the superstate are executed. Likewise when leaving from the substate to outside the supserstate, exit actions for the superstate will execute."
  },
  "api/Stateless.StateMachine-2.Transition.html": {
    "href": "api/Stateless.StateMachine-2.Transition.html",
    "title": "Class StateMachine<TState, TTrigger>.Transition | Stateless For Unity documentation",
    "keywords": "Class StateMachine<TState, TTrigger>.Transition Describes a state transition. Inheritance Object StateMachine<TState, TTrigger>.Transition StateMachine<TState, TTrigger>.InitialTransition Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless Assembly : cs.temp.dll.dll Syntax public class Transition Constructors Transition(TState, TState, TTrigger, Object[]) Construct a transition. Declaration public Transition(TState source, TState destination, TTrigger trigger, object[] parameters = null) Parameters Type Name Description TState source The state transitioned from. TState destination The state transitioned to. TTrigger trigger The trigger that caused the transition. Object [] parameters The optional trigger parameters Properties Destination The state transitioned to. Declaration public TState Destination { get; } Property Value Type Description TState IsReentry True if the transition is a re-entry, i.e. the identity transition. Declaration public bool IsReentry { get; } Property Value Type Description Boolean Parameters The trigger parameters Declaration public object[] Parameters { get; } Property Value Type Description Object [] Remarks Never null. For a parameterless trigger the value will be an empty array. Source The state transitioned from. Declaration public TState Source { get; } Property Value Type Description TState Trigger The trigger that caused the transition. Declaration public TTrigger Trigger { get; } Property Value Type Description TTrigger"
  },
  "api/Stateless.StateMachine-2.TriggerWithParameters.html": {
    "href": "api/Stateless.StateMachine-2.TriggerWithParameters.html",
    "title": "Class StateMachine<TState, TTrigger>.TriggerWithParameters | Stateless For Unity documentation",
    "keywords": "Class StateMachine<TState, TTrigger>.TriggerWithParameters Associates configured parameters with an underlying trigger value. Inheritance Object StateMachine<TState, TTrigger>.TriggerWithParameters StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless Assembly : cs.temp.dll.dll Syntax public class TriggerWithParameters Constructors TriggerWithParameters(TTrigger, Type[]) Create a configured trigger. Declaration public TriggerWithParameters(TTrigger underlyingTrigger, params Type[] argumentTypes) Parameters Type Name Description TTrigger underlyingTrigger Trigger represented by this trigger configuration. Type [] argumentTypes The argument types expected by the trigger. Properties Trigger Gets the underlying trigger value that has been configured. Declaration public TTrigger Trigger { get; } Property Value Type Description TTrigger Methods ValidateParameters(Object[]) Ensure that the supplied arguments are compatible with those configured for this trigger. Declaration public void ValidateParameters(object[] args) Parameters Type Name Description Object [] args"
  },
  "api/Stateless.StateMachine-2.TriggerWithParameters-1.html": {
    "href": "api/Stateless.StateMachine-2.TriggerWithParameters-1.html",
    "title": "Class StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> | Stateless For Unity documentation",
    "keywords": "Class StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> A configured trigger with one required argument. Inheritance Object StateMachine.TriggerWithParameters <> StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0> Inherited Members StateMachine<TState, TTrigger>.TriggerWithParameters.Trigger StateMachine<TState, TTrigger>.TriggerWithParameters.ValidateParameters(Object[]) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless Assembly : cs.temp.dll.dll Syntax public class TriggerWithParameters<TArg0> : StateMachine<TState, TTrigger>.TriggerWithParameters Type Parameters Name Description TArg0 The type of the first argument. Constructors TriggerWithParameters(TTrigger) Create a configured trigger. Declaration public TriggerWithParameters(TTrigger underlyingTrigger) Parameters Type Name Description TTrigger underlyingTrigger Trigger represented by this trigger configuration."
  },
  "api/Stateless.StateMachine-2.TriggerWithParameters-2.html": {
    "href": "api/Stateless.StateMachine-2.TriggerWithParameters-2.html",
    "title": "Class StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> | Stateless For Unity documentation",
    "keywords": "Class StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> A configured trigger with two required arguments. Inheritance Object StateMachine.TriggerWithParameters <> StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1> Inherited Members StateMachine<TState, TTrigger>.TriggerWithParameters.Trigger StateMachine<TState, TTrigger>.TriggerWithParameters.ValidateParameters(Object[]) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless Assembly : cs.temp.dll.dll Syntax public class TriggerWithParameters<TArg0, TArg1> : StateMachine<TState, TTrigger>.TriggerWithParameters Type Parameters Name Description TArg0 The type of the first argument. TArg1 The type of the second argument. Constructors TriggerWithParameters(TTrigger) Create a configured trigger. Declaration public TriggerWithParameters(TTrigger underlyingTrigger) Parameters Type Name Description TTrigger underlyingTrigger Trigger represented by this trigger configuration."
  },
  "api/Stateless.StateMachine-2.TriggerWithParameters-3.html": {
    "href": "api/Stateless.StateMachine-2.TriggerWithParameters-3.html",
    "title": "Class StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> | Stateless For Unity documentation",
    "keywords": "Class StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> A configured trigger with three required arguments. Inheritance Object StateMachine.TriggerWithParameters <> StateMachine<TState, TTrigger>.TriggerWithParameters<TArg0, TArg1, TArg2> Inherited Members StateMachine<TState, TTrigger>.TriggerWithParameters.Trigger StateMachine<TState, TTrigger>.TriggerWithParameters.ValidateParameters(Object[]) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless Assembly : cs.temp.dll.dll Syntax public class TriggerWithParameters<TArg0, TArg1, TArg2> : StateMachine<TState, TTrigger>.TriggerWithParameters Type Parameters Name Description TArg0 The type of the first argument. TArg1 The type of the second argument. TArg2 The type of the third argument. Constructors TriggerWithParameters(TTrigger) Create a configured trigger. Declaration public TriggerWithParameters(TTrigger underlyingTrigger) Parameters Type Name Description TTrigger underlyingTrigger Trigger represented by this trigger configuration."
  },
  "api/Stateless.StateMachineResources.html": {
    "href": "api/Stateless.StateMachineResources.html",
    "title": "Class StateMachineResources | Stateless For Unity documentation",
    "keywords": "Class StateMachineResources Inheritance Object StateMachineResources Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Stateless Assembly : cs.temp.dll.dll Syntax public static class StateMachineResources Fields CannotReconfigureParameters Parameters for the trigger '{0}' have already been configured. Declaration public const string CannotReconfigureParameters = \"Parameters for the trigger '{0}' have already been configured.\" Field Value Type Description String NoTransitionsPermitted No valid leaving transitions are permitted from state '{1}' for trigger '{0}'. Consider ignoring the trigger. Declaration public const string NoTransitionsPermitted = \"No valid leaving transitions are permitted from state '{1}' for trigger '{0}'. Consider ignoring the trigger.\" Field Value Type Description String NoTransitionsUnmetGuardConditions Trigger '{0}' is valid for transition from state '{1}' but a guard conditions are not met. Guard descriptions: '{2}'. Declaration public const string NoTransitionsUnmetGuardConditions = \"Trigger '{0}' is valid for transition from state '{1}' but a guard conditions are not met. Guard descriptions: '{2}'.\" Field Value Type Description String"
  },
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "Changelog | Stateless For Unity documentation",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 5.11.0 - 2021.04.28 Added Added CanFire overload to return unmet guard descriptions [#443] Fixed Inconsistency in sync/async statemachine execution [#444] Added support for spaces in state/trigger names in Graphviz node graphs by wrapping them in escaped quotes #447 5.10.1 Re-releasing 5.2.0 as v5.10.1. The version number was accidentally set to 5.10 when creating the 5.2 release. Version 5.10.0 is now listed as the newest, since it has the highest version number. 5.2.0 and 5.10.0 are identical. 5.2.0 Added Added support for net50 Changed Only run tests under net50 Non-code change: Switch to using Github Actions Fixed Fixed the bug \"IgnoreIf Guard description is raised when PermitReentryIf Guard Fails\". #422 5.1.8 Fixed Fixed bug \"When adding .PermitDynamicIf, call .PermitTriggers throw NullReferenceException\" #416 5.1.7 - 2021.01.10 Fixed Fixed nullReferenceException when getting permitted triggers on a dynamic transition. #413 5.1.7 - 2021.01.10 Fixed Fixed OnTransitionCompletedEvent, it now has the correct Destination state when there is an initial transition. #413 5.1.6 - 2020.11.21 Fixed Added support for new OnTransitionCompletedEvent, which is run after all OnExit / OnEntry methods have run #394 5.1.5 - 2020.11.16 Changed Fixed spelling errors Fixed analyser warnings (mostly null checks) Fixed Added CLSCompliant attribute, which went missing in November 2019 #401 5.1.4 - 2020.11.07 Fixed Fixed Unmet guard collection not set by OnUnhandledTrigger if transition guard of substate fails #398 (Thanks to the awesome DeepakParamkusam) 5.1.3 - 2020.08.12 Fixed Fixed ambiguos guard function call when trigger is a state #380 5.1.2 - 2020.04.27 Fixed Fixed wrong onTransitionEvent ordering in Async firing [#372] [5.1.1] - 2020.04.03 Changed Inverted if (_firingMode.Equals(FiringMode.Immediate) into if (FiringMode.Immediate.Equals(_firingMode) to avoid VerificationException when including assembly AllowPartiallyTrustedCallers #365 . [5.1.0] - 2020.03.24 Added Added missing possible destination states to all PermitDynamic and PermitDynamicIf, see issue #305 . Fixed Fixed trigger execution order issue if there are uncaught exceptions. Ref issue #267 Fixed issue #272 and #275. Triggers with no parameters threw exceptions when checking if they could be fired, or retrieved with GetPermittedTriggers. [5.0.1] - 2020.03.13 Fixed Added missing initial transition, see PR #286. [5.0.0] - 2020.02.28 Changed Activate and deactivate actions only runs on manual call to Activate / Deactivate. This breaks the v4.4 implementation, where activate/deactivate actions are run on every state transition. [4.4.0] - 2020.02.07 Changed PR #348 Added trigger parameters to OnTransitioned event Fixed #342 StateMutator is called multiple times with the same state #345 Wrong behavior with FiringMode.Immediate in version 4.3.0 #339 OnEntry behavour different: Unit test broken when updated to 4.3.0 from 4.2.1 #292 Nested InitialTransitions calls superstate onEntry twice [4.3.0] - 2019.11.11 Changed Netstandard2.0 support 4.2.0 - 2018.06.01 Added PR #254 Add initial transitions Changed Simplified examples a bit and added comments Fixed #261 Reentrant trigger in substate causes exit action to be executed twice #263 NullReferenceException bug introduced in commit c13e181b 4.1.0 - 2018-05-18 Added #246 Queuing should not be the default behavior Fixed #191 Shouldn't Reentry fire OnEntry from substate? #228 guard function called twice? #214 Transition object holds parent state as source state instead of child #249 Latest prerelease v4.0.1-dev-00294 bug (Internal transition handler not executing) 4.0.0 - 2017-09-30 Added #169 HTML format DOT graph output #132 Conditional InternalTransition #130 Support InternalTransition for all TriggerWithParams Changed #178 Replace calls to Enforce.ArgumentNotNull with in-place null checks, and other changes suggested by CodeCracker #168 Modified the output of OnUnmute to display the correct message #164 Reducing confusion, and fixing invalid cast in Reflection. #158 Create new ActionInfo class, start insinuating it #156 TriggerInfo.Value -> UnderlyingTrigger #149 Moved StateType and TriggerType into StateMachineInfo, removed TriggerInfo #147 Extracting common abstract base class for transition info #142 Further reflection API refinement #141 Update to RTM dotnet tooling/VS2017 #137 Replace magic string usages with nameof() #125 Adding check for cyclic configuration #123 Update for the current .NET Core version Deprecated Removed Fixed #175 Fix Multiple internal transition actions executed if defined in state hierarchy, and Renamed DynamicTransitionInfo.Destination to DestinationDescription #144 Fix unbounded recursion/fully initialize sub/super-states #140 Adding recursive trigger processing to InternalFireAsync 3.1.0 - 2016-12-15 Added Changed Deprecated Removed Fixed 3.0.1 - 2016-11-23 Added Changed Deprecated Removed Fixed 3.0.0 - 2016-11-03 Added Changed Deprecated Removed Fixed Release template - version and date goes here Added Changed Deprecated Removed Fixed"
  },
  "index.html": {
    "href": "index.html",
    "title": "Stateless | Stateless For Unity documentation",
    "keywords": "Stateless Create state machines and lightweight state machine-based workflows directly in .NET code: var phoneCall = new StateMachine<State, Trigger>(State.OffHook); phoneCall.Configure(State.OffHook) .Permit(Trigger.CallDialled, State.Ringing); phoneCall.Configure(State.Connected) .OnEntry(t => StartCallTimer()) .OnExit(t => StopCallTimer()) .InternalTransition(Trigger.MuteMicrophone, t => OnMute()) .InternalTransition(Trigger.UnmuteMicrophone, t => OnUnmute()) .InternalTransition<int>(_setVolumeTrigger, (volume, t) => OnSetVolume(volume)) .Permit(Trigger.LeftMessage, State.OffHook) .Permit(Trigger.PlacedOnHold, State.OnHold); // ... phoneCall.Fire(Trigger.CallDialled); Assert.AreEqual(State.Ringing, phoneCall.State); This project, as well as the example above, was inspired by Simple State Machine . Features Most standard state machine constructs are supported: Generic support for states and triggers of any .NET type (numbers, strings, enums, etc.) Hierarchical states Entry/exit actions for states Guard clauses to support conditional transitions Introspection Some useful extensions are also provided: Ability to store state externally (for example, in a property tracked by an ORM) Parameterised triggers Reentrant states Export to DOT graph Hierarchical States In the example below, the OnHold state is a substate of the Connected state. This means that an OnHold call is still connected. phoneCall.Configure(State.OnHold) .SubstateOf(State.Connected) .Permit(Trigger.TakenOffHold, State.Connected) .Permit(Trigger.PhoneHurledAgainstWall, State.PhoneDestroyed); In addition to the StateMachine.State property, which will report the precise current state, an IsInState(State) method is provided. IsInState(State) will take substates into account, so that if the example above was in the OnHold state, IsInState(State.Connected) would also evaluate to true . Entry/Exit actions In the example, the StartCallTimer() method will be executed when a call is connected. The StopCallTimer() will be executed when call completes (by either hanging up or hurling the phone against the wall.) The call can move between the Connected and OnHold states without the StartCallTimer() and StopCallTimer() methods being called repeatedly because the OnHold state is a substate of the Connected state. Entry/Exit action handlers can be supplied with a parameter of type Transition that describes the trigger, source and destination states. Internal transitions Sometimes a trigger does needs to be handled, but the state shouldn't change. This is an internal transition. Use InternalTransition for this. Initial state transitions A substate can be marked as initial state. When the state machine enters the super state it will also automatically enter the substate. This can be configured like this: sm.Configure(State.B) .InitialTransition(State.C); sm.Configure(State.C) .SubstateOf(State.B); Due to Stateless' internal structure, it does not know when it is \"started\". This makes it impossible to handle an initial transition in the traditional way. It is possible to work around this limitation by adding a dummy initial state, and then use Activate() to \"start\" the state machine. sm.Configure(InitialState) .OnActivate(() => sm.Fire(LetsGo))) .Permit(LetsGo, StateA) External State Storage Stateless is designed to be embedded in various application models. For example, some ORMs place requirements upon where mapped data may be stored, and UI frameworks often require state to be stored in special \"bindable\" properties. To this end, the StateMachine constructor can accept function arguments that will be used to read and write the state values: var stateMachine = new StateMachine<State, Trigger>( () => myState.Value, s => myState.Value = s); In this example the state machine will use the myState object for state storage. Another example can be found in the JsonExample solution, located in the example folder. Activation / Deactivation It might be necessary to perform some code before storing the object state, and likewise when restoring the object state. Use Deactivate and Activate for this. Activation should only be called once before normal operation starts, and once before state storage. Introspection The state machine can provide a list of the triggers that can be successfully fired within the current state via the StateMachine.PermittedTriggers property. Use StateMachine.GetInfo() to retreive information about the state configuration. Guard Clauses The state machine will choose between multiple transitions based on guard clauses, e.g.: phoneCall.Configure(State.OffHook) .PermitIf(Trigger.CallDialled, State.Ringing, () => IsValidNumber) .PermitIf(Trigger.CallDialled, State.Beeping, () => !IsValidNumber); Guard clauses within a state must be mutually exclusive (multiple guard clauses cannot be valid at the same time.) Substates can override transitions by respecifying them, however substates cannot disallow transitions that are allowed by the superstate. The guard clauses will be evaluated whenever a trigger is fired. Guards should therefor be made side effect free. Parameterised Triggers Strongly-typed parameters can be assigned to triggers: var assignTrigger = stateMachine.SetTriggerParameters<string>(Trigger.Assign); stateMachine.Configure(State.Assigned) .OnEntryFrom(assignTrigger, email => OnAssigned(email)); stateMachine.Fire(assignTrigger, \"joe@example.com\"); Trigger parameters can be used to dynamically select the destination state using the PermitDynamic() configuration method. Ignored Transitions and Reentrant States Firing a trigger that does not have an allowed transition associated with it will cause an exception to be thrown. To ignore triggers within certain states, use the Ignore(TTrigger) directive: phoneCall.Configure(State.Connected) .Ignore(Trigger.CallDialled); Alternatively, a state can be marked reentrant so its entry and exit actions will fire even when transitioning from/to itself: stateMachine.Configure(State.Assigned) .PermitReentry(Trigger.Assigned) .OnEntry(() => SendEmailToAssignee()); By default, triggers must be ignored explicitly. To override Stateless's default behaviour of throwing an exception when an unhandled trigger is fired, configure the state machine using the OnUnhandledTrigger method: stateMachine.OnUnhandledTrigger((state, trigger) => { }); State change notifications (events) Stateless supports 3 types of state machine events: Internal state transition State transition State machine transition completed Internal state transition stateMachine.OnInternalTransitioned((state, trigger) => { }); This event will be invoked every time the state machine handles an internal state transition. State transition stateMachine.OnTransitioned((state, trigger) => { }); This event will be invoked every time the state machine changes state. State machine transition completed stateMachine.OnTransitionCompleted((state, trigger) => { }); This event will be invoked at the very end of the trigger handling, after the last entry action have been executed. Export to DOT graph It can be useful to visualize state machines on runtime. With this approach the code is the authoritative source and state diagrams are by-products which are always up to date. phoneCall.Configure(State.OffHook) .PermitIf(Trigger.CallDialled, State.Ringing, IsValidNumber); string graph = UmlDotGraph.Format(phoneCall.GetInfo()); The UmlDotGraph.Format() method returns a string representation of the state machine in the DOT graph language , e.g.: digraph { OffHook -> Ringing [label=\"CallDialled [IsValidNumber]\"]; } This can then be rendered by tools that support the DOT graph language, such as the dot command line tool from graphviz.org or viz.js . See http://www.webgraphviz.com for instant gratification. Command line example: dot -T pdf -o phoneCall.pdf phoneCall.dot to generate a PDF file. Async triggers On platforms that provide Task<T> , the StateMachine supports async entry/exit actions and so-on: stateMachine.Configure(State.Assigned) .OnEntryAsync(async () => await SendEmailToAssignee()); Asynchronous handlers must be registered using the *Async() methods in these cases. To fire a trigger that invokes asynchronous actions, the FireAsync() method must be used: await stateMachine.FireAsync(Trigger.Assigned); Note: while StateMachine may be used asynchronously , it remains single-threaded and may not be used concurrently by multiple threads. Building Stateless runs on .NET 4.0+ and practically all modern .NET platforms by targeting .NET Standard 1.0 and .NET Standard2.0. Visual Studio 2017 or later is required to build the solution. Project Goals This page is an almost-complete description of Stateless, and its explicit aim is to remain minimal. Please use the issue tracker or the if you'd like to report problems or discuss features. ( Why the name? Stateless implements the set of rules regarding state transitions, but, at least when the delegate version of the constructor is used, doesn't maintain any internal state itself. )"
  }
}